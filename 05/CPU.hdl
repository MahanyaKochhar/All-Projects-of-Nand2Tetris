// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=aluoutput,sel=instruction[15],out=aregisterinput);
    
    Not(in=instruction[15],out=loadA);
    
    And(a=instruction[4],b=instruction[15],out=dload);
    DRegister(in=aluoutput,load=dload,out=dregisterout);

    //ARegister(in=aregisterinput,load=loadA,out=aregisteroutput1);
    //ARegister(in=aregisterinput,load=instruction[5],out=aregisteroutput2);
    //Mux16(a=aregisteroutput1,b=aregisteroutput2,sel=instruction[15],out=aregisterout);
      Or(a=instruction[5],b=loadA,out=load);
      ARegister(in=aregisterinput,load=load,out=aregisterout);
    
    And16(a=true,b=aregisterout,out[0..14]=addressM);
    And(a=instruction[12],b=instruction[15],out=test);
    Mux16(a=aregisterout,b=inM,sel=test,out=muxout);


    
    ALU(x=dregisterout ,y=muxout,zx=instruction[11],nx=instruction[10] ,zy=instruction[9] ,ny=instruction[8] ,f=instruction[7] ,no=instruction[6],out=aluoutput ,zr=zr ,ng=ng );
    And(a=instruction[15],b=instruction[3],out=writeM);

   
    
    And16(a=true,b=aluoutput,out=outM);
    Not(in=zr,out=notzr);
    Not(in=ng,out=notng);
    Or(a=ng,b=zr,out=notc);
    Not(in=notc,out=notc2);
    Not(in=notc2,out=notc3);
    Mux16(a=false,b=true,sel=zr,out=zr1);
    Mux16(a=false,b=true,sel=ng,out=ng1);
    Mux16(a=false,b=true,sel=notc2,out=notc21);
    Mux16(a=false,b=true,sel=notc3,out=notc31);
    Mux16(a=false,b=true,sel=notng,out=notng1);
    Mux16(a=false,b=true,sel=notzr,out=notzr1);
    Mux8Way16(a=false,b=notc21,c=zr1,d=notng1,e=ng1,f=notzr1,g=notc31,h=true,sel=instruction[0..2],out[0]=finload);
    And(a=finload,b=instruction[15],out=finload2);
    PC(in=aregisterout,load=finload2,inc=true,reset=reset,out[0..14]=pc);
    
    
    
}